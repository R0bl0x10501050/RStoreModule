{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"RStore is a quick data saving module built for Roblox games. Setting Up For help with setting up, please view the Quickstart for a speedy introduction of how RStore can work with your game. Thanks for choosing RStore! ??? info RStore was created in just a day, on 4/2/21!","title":"Home"},{"location":"docs/","text":"Documentation RStore [CLASS] RStore.new(...) Description: Creates a new RDataStore for you to use Parameters: Datakey - A unique key for storing data in that specific RDataStore Returns: RDataStore [CLASS] RDataStore [CLASS] RDataStore:Get(...) Description: Gets the specified obj's value from the cache Parameters: Obj - A unique key (can be an Instance, string, integer, etc.) DefaultValue - Default value to be cached if there is no saved value in the cache or DataStore API Returns: Cached result RDataStore:Set(...) Description: Sets the specified obj's value to the specified data in the cache Parameters: Obj - A unique key (can be an Instance, string, integer, etc.) Data - Data to cache in RDataStore Returns: Cached result RDataStore:Increment(...) Description: Increments the specified obj's value by the specified amount in the cache Remember, :Increment() will only work with numerical values! Parameters: Obj - A unique key (can be an Instance, string, integer, etc.) Amount - Amount to increase the current value by Returns: Cached result RDataStore:OnUpdate(...) Description: Executes callback when the RDataStore is updated NewValue When the callback is executed, it provides a variable, \"newValue\". It'd be a good idea to take advantage of that! Parameters: Callback - A function to execute every time the RDataStore is updated; callback includes newValue as a function parameter Returns: nil RDataStore:Save(...) Description: Saves the specified obj's value to the Roblox Datastore API Auto-Save When a player leaves or game:BindToClose() is fired, :Save() is automatically called. Parameters: Obj - A unique key (can be an Instance, string, integer, etc.) Returns: Cached result RDataStore:SaveAll() Description: Calls :Save() on all objs in each RDataStore Warning :SaveAll() can cause DataStore lag and it is not recommended that this method is used.","title":"Docs"},{"location":"docs/#documentation","text":"","title":"Documentation"},{"location":"docs/#rstore-class","text":"","title":"RStore [CLASS]"},{"location":"docs/#rstorenew","text":"","title":"RStore.new(...)"},{"location":"docs/#description","text":"Creates a new RDataStore for you to use","title":"Description:"},{"location":"docs/#parameters","text":"Datakey - A unique key for storing data in that specific RDataStore","title":"Parameters:"},{"location":"docs/#returns","text":"RDataStore [CLASS]","title":"Returns:"},{"location":"docs/#rdatastore-class","text":"","title":"RDataStore [CLASS]"},{"location":"docs/#rdatastoreget","text":"","title":"RDataStore:Get(...)"},{"location":"docs/#description_1","text":"Gets the specified obj's value from the cache","title":"Description:"},{"location":"docs/#parameters_1","text":"Obj - A unique key (can be an Instance, string, integer, etc.) DefaultValue - Default value to be cached if there is no saved value in the cache or DataStore API","title":"Parameters:"},{"location":"docs/#returns_1","text":"Cached result","title":"Returns:"},{"location":"docs/#rdatastoreset","text":"","title":"RDataStore:Set(...)"},{"location":"docs/#description_2","text":"Sets the specified obj's value to the specified data in the cache","title":"Description:"},{"location":"docs/#parameters_2","text":"Obj - A unique key (can be an Instance, string, integer, etc.) Data - Data to cache in RDataStore","title":"Parameters:"},{"location":"docs/#returns_2","text":"Cached result","title":"Returns:"},{"location":"docs/#rdatastoreincrement","text":"","title":"RDataStore:Increment(...)"},{"location":"docs/#description_3","text":"Increments the specified obj's value by the specified amount in the cache Remember, :Increment() will only work with numerical values!","title":"Description:"},{"location":"docs/#parameters_3","text":"Obj - A unique key (can be an Instance, string, integer, etc.) Amount - Amount to increase the current value by","title":"Parameters:"},{"location":"docs/#returns_3","text":"Cached result","title":"Returns:"},{"location":"docs/#rdatastoreonupdate","text":"","title":"RDataStore:OnUpdate(...)"},{"location":"docs/#description_4","text":"Executes callback when the RDataStore is updated NewValue When the callback is executed, it provides a variable, \"newValue\". It'd be a good idea to take advantage of that!","title":"Description:"},{"location":"docs/#parameters_4","text":"Callback - A function to execute every time the RDataStore is updated; callback includes newValue as a function parameter","title":"Parameters:"},{"location":"docs/#returns_4","text":"nil","title":"Returns:"},{"location":"docs/#rdatastoresave","text":"","title":"RDataStore:Save(...)"},{"location":"docs/#description_5","text":"Saves the specified obj's value to the Roblox Datastore API Auto-Save When a player leaves or game:BindToClose() is fired, :Save() is automatically called.","title":"Description:"},{"location":"docs/#parameters_5","text":"Obj - A unique key (can be an Instance, string, integer, etc.)","title":"Parameters:"},{"location":"docs/#returns_5","text":"Cached result","title":"Returns:"},{"location":"docs/#rdatastoresaveall","text":"","title":"RDataStore:SaveAll()"},{"location":"docs/#description_6","text":"Calls :Save() on all objs in each RDataStore Warning :SaveAll() can cause DataStore lag and it is not recommended that this method is used.","title":"Description:"},{"location":"Quickstart/basic_usage/","text":"Quick Start Info This is an example of how to save player cash. First, you need to create a new RDataStore to save data. local RStore = require ( \"path.to.RStore\" ) local RDataStore = RStore . new ( \"datakey\" ) Next, you probably have a variable or something you want to save. local RStore = require ( \"path.to.RStore\" ) local CashStore = RStore . new ( \"datakey\" ) game . Players . PlayerAdded : Connect ( function ( plr ) local cash = CashStore : Get ( plr , 0 ) -- **plr** is who you're saving it for, **0** is the default value end ) Obviously, something makes the player earn some cash. In this case, let's make it add 10 cash every time they say \"I want cash!\" local RStore = require ( \"path.to.RStore\" ) local CashStore = RStore . new ( \"datakey\" ) game . Players . PlayerAdded : Connect ( function ( plr ) local cash = CashStore : Get ( plr , 0 ) -- **plr** is who you're saving it for, **0** is the default value plr . Chatted : Connect ( function ( msg ) if msg == \"I want cash!\" then CashStore : Increment ( plr , 10 ) -- here, you **increment** since you want to *add* to the current value. otherwise, if you wanted to directly overwrite, you'd use :Set() end end ) end ) ??? tip You can print the value of CashStore:Get(plr) to see it increase. Great! Now you have a basic understanding of how to use RStore in your Roblox game!","title":"Basic Usage"},{"location":"Quickstart/basic_usage/#quick-start","text":"Info This is an example of how to save player cash. First, you need to create a new RDataStore to save data. local RStore = require ( \"path.to.RStore\" ) local RDataStore = RStore . new ( \"datakey\" ) Next, you probably have a variable or something you want to save. local RStore = require ( \"path.to.RStore\" ) local CashStore = RStore . new ( \"datakey\" ) game . Players . PlayerAdded : Connect ( function ( plr ) local cash = CashStore : Get ( plr , 0 ) -- **plr** is who you're saving it for, **0** is the default value end ) Obviously, something makes the player earn some cash. In this case, let's make it add 10 cash every time they say \"I want cash!\" local RStore = require ( \"path.to.RStore\" ) local CashStore = RStore . new ( \"datakey\" ) game . Players . PlayerAdded : Connect ( function ( plr ) local cash = CashStore : Get ( plr , 0 ) -- **plr** is who you're saving it for, **0** is the default value plr . Chatted : Connect ( function ( msg ) if msg == \"I want cash!\" then CashStore : Increment ( plr , 10 ) -- here, you **increment** since you want to *add* to the current value. otherwise, if you wanted to directly overwrite, you'd use :Set() end end ) end ) ??? tip You can print the value of CashStore:Get(plr) to see it increase. Great! Now you have a basic understanding of how to use RStore in your Roblox game!","title":"Quick Start"},{"location":"Quickstart/installation/","text":"Installation Installation There are multiple ways to install RStore, but the first way is the easiest. 1. Roblox Model Hop on over to the Roblox website and download the model here . 2. Manual Installation First, create a ModuleScript in ServerStorage. Then, create another ModuleScript in the first ModuleScript. Name the first ModuleScript \"RStore\". Name the second ModuleScript \"Class\". In the \"RStore\" ModuleScript, make the source this . In the \"Class\" ModuleScript, make the source this . Great! Time to move onto the next step!","title":"Installation"},{"location":"Quickstart/installation/#installation","text":"Installation There are multiple ways to install RStore, but the first way is the easiest.","title":"Installation"},{"location":"Quickstart/installation/#1-roblox-model","text":"Hop on over to the Roblox website and download the model here .","title":"1. Roblox Model"},{"location":"Quickstart/installation/#2-manual-installation","text":"First, create a ModuleScript in ServerStorage. Then, create another ModuleScript in the first ModuleScript. Name the first ModuleScript \"RStore\". Name the second ModuleScript \"Class\". In the \"RStore\" ModuleScript, make the source this . In the \"Class\" ModuleScript, make the source this . Great! Time to move onto the next step!","title":"2. Manual Installation"}]}